// The Orcbrew format uses a (modified) subset of Clojure's Extensive Data Notation (EDN).
// This grammar attempts to correctly describe `.orcbrew` files.
// Modifications to the EDN spec are described by `CHANGE:` comments.
// Reference: https://github.com/edn-format/edn

// Elements are generally separated by whitespace.
// Whitespace, other than within strings, is not otherwise significant, nor need redundant whitespace be preserved during transmissions.
// Commas are also considered whitespace, other than within strings.
WHITESPACE = _{ " " | NEWLINE | "," }

// If a ; character is encountered outside of a string, that character and all subsequent characters to the next newline should be ignored.
// CHANGE: Disallow comments.
//COMMENT = { ";" ~ (!NEWLINE ~ ANY) ~ NEWLINE }

// edn elements, streams and files should be encoded using UTF-8.
// There is no enclosing element at the top level.
// CHANGE: The stream contains a single top-level element.
stream = _{ SOI ~ "\u{feff}"? ~ element ~ eoi}
element = _{ nil | boolean | string | symbol | keyword | integer | float | list | vector | set | map }
eoi = _{ !ANY } // Make EOI silent.

// nil represents nil, null or nothing.
// CHANGE: Allow ##NaN, which represents an error passed back from JS.
nil = @{ "nil" | "##NaN" }

// true and false should be mapped to booleans.
boolean = @{ "true" | "false" }

// Strings are enclosed in "double quotes". May span multiple lines.
// Standard C/Java escape characters \t, \r, \n, \\ and \" are supported.
string      = @{ "\"" ~ (escape_char | not_quote)* ~ "\"" }
escape_char = _{ "\\t" | "\\r" | "\\n" | "\\\\" | "\\\"" }
not_quote   = _{ !"\"" ~ ANY }

// Characters are preceded by a backslash: \c, \newline, \return, \space and \tab yield the corresponding characters.
// Unicode characters are represented with \uNNNN as in Java. Backslash cannot be followed by whitespace.
// CHANGE: Disallow characters
//character = @{
//    "\\c" | "\\newline" | "\\return" | "\\space" | "\\tab"
//    | ("\\u" ~ ASCII_DIGIT{4})
//    | ("\\" ~ ASCII_ALPHANUMERIC)
//}

// Symbols are used to represent identifiers, and should map to something other than strings, if possible.
// Symbols begin with a non-numeric character and can contain alphanumeric characters and . * + ! - _ ? $ % & = < >.
// If -, + or . are the first character, the second character (if any) must be non-numeric.
// Additionally, : # are allowed as constituent characters in symbols other than as the first character.
// / can be used once only in the middle of a symbol to separate the prefix (often a namespace) from the name, e.g. my-namespace/foo.
// / by itself is a legal symbol, but otherwise neither the prefix nor the name part can be empty when the symbol contains /.
symbol  = @{ "/" | (prefix ~ "/" ~ ident+) | prefix }
prefix  = _{ !(ASCII_DIGIT | ":" | "#") ~ ident+ }
ident   = _{ ASCII_ALPHANUMERIC | "." | "*" | "+" | "!" | "-" | "_" | "?" | "$" | "%" | "&" | "=" | "<" | ">" | ":" | "#"}

// Keywords are identifiers that typically designate themselves.
// Keywords follow the rules of symbols, except they can (and must) begin with :, e.g. :fred or :my/fred.
// Per the symbol rules above, :/ and :/anything are not legal keywords. A keyword cannot begin with ::.
keyword = @{ !("::" | ":/") ~ (":" ~ symbol) }

// Integers consist of the digits 0 - 9, optionally prefixed by - to indicate a negative number, or (redundantly) by +.
// No integer other than 0 may begin with 0. -0 is a valid integer not distinct from 0.
// 64-bit (signed integer) precision is expected. An integer can have the suffix N to indicate that arbitrary precision is desired.
integer = @{ ("+" | "-")? ~ ASCII_DIGIT+ }

// 64-bit (double) precision is expected.
// A floating-point number may have the suffix M to indicate that exact precision is desired.
float = @{
    ("+" | "-")?
    ~ ASCII_DIGIT+
    ~ ("." ~ ASCII_DIGIT+)?
    ~ (("e" | "E") ~ ("+" | "-")? ~ ASCII_DIGIT+ )?
    ~ "M"?
}

// A list is a sequence of values.
// Lists are represented by zero or more elements enclosed in parentheses ().
list = { "(" ~ element* ~ ")" }

// A vector is a sequence of values that supports random access.
// Vectors are represented by zero or more elements enclosed in square brackets [].
vector = { "[" ~ element* ~ "]" }

// A set is a collection of unique values.
// Sets are represented by zero or more elements enclosed in curly braces preceded by #.
set = { "#{" ~ element* ~ "}" }

// A map is a collection of associations between keys and values.
// Maps are represented by zero or more key and value pairs enclosed in curly braces {}.
// CHANGE: Keys can only be strings, symbols, keywords, or integers.
// CHANGE: Allow optional trailing element, which should be discarded.
map = { "{" ~ kv_pair* ~ element? ~ "}" }
kv_pair = { (string | symbol | keyword | integer) ~ element }

// # followed immediately by a symbol starting with an alphabetic character indicates that that symbol is a tag.
// A tag indicates the semantic interpretation of the following element.
// CHANGE: Disallow tagged elements.
//tagged_element = { "#" ~ symbol ~ element }

// # followed immediately by _ is the discard sequence, indicating that the next element should be read and discarded.
// Note that the next element must still be a readable element.
// CHANGE: Disallow dicard sequences.
//discard_element = { "#_" ~ element }